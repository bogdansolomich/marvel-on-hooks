{"version":3,"file":"static/js/654.9469dae4.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import img from './error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: 'block',\n        width: '250px',\n        height: '250px',\n        objectFit: 'contain',\n        margin: '0 auto',\n      }}\n      src={img}\n      alt=\"Error\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n  const [char, setChar] = useState(null);\n  const { getCharacter, clearError, process, setPropcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onCharLoaded = char => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setPropcess('confirmed'));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n  let imgStyle = { objectFit: 'cover' };\n  if (\n    thumbnail ===\n    'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n  ) {\n    imgStyle = { objectFit: 'contain' };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className=\"randomchar__img\"\n        style={imgStyle}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">{description}</p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport { useMemo } from 'react';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case 'waiting':\n      return <Spinner />;\n    case 'loading':\n      return newItemLoading ? <Component /> : <Spinner />;\n    case 'confirmed':\n      return <Component />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\n\nconst CharList = props => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setnewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { getAllCharacters, process, setPropcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setnewItemLoading(false) : setnewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setPropcess('confirmed'));\n  };\n\n  const onCharListLoaded = async newCharList => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n    setCharList([...charList, ...newCharList]);\n    setnewItemLoading(false);\n    setOffset(offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = id => {\n    itemRefs.current.forEach(item =>\n      item.classList.remove('char__item_selected')\n    );\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: 'cover' };\n      if (\n        item.thumbnail ===\n        'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n      ) {\n        imgStyle = { objectFit: 'unset' };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={el => (itemRefs.current[i] = el)}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={e => {\n              if (e.key === ' ' || e.key === 'Enter') {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const Elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {Elements}\n      <button\n        disabled={newItemLoading}\n        style={{ display: charEnded ? 'none' : 'block' }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './charInfo.scss';\n\nconst CharInfo = props => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setPropcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setPropcess('confirmed'));\n  };\n\n  const onCharLoaded = char => {\n    setChar(char);\n  };\n\n  // const skeleton = char || loading || error ? null : <Skeleton />;\n  // const errorMessage = error ? <ErrorMessage /> : null;\n  // const spinner = loading ? <Spinner /> : null;\n  // const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n  let imgStyle = { objectFit: 'cover' };\n  if (\n    thumbnail ===\n    'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'\n  ) {\n    imgStyle = { objectFit: 'contain' };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : 'There is no comics with this character'}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from 'react';\nimport {\n  Formik,\n  Form,\n  Field,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n  const [char, setChar] = useState(null);\n  const { getCharacterByName, clearError, process, setProcess } =\n    useMarvelService();\n\n  const onCharLoaded = char => {\n    setChar(char);\n  };\n\n  const updateChar = name => {\n    clearError();\n\n    getCharacterByName(name)\n      .then(onCharLoaded)\n      .then(() => setProcess('confirmed'));\n  };\n\n  const errorMessage =\n    process === 'error' ? (\n      <div className=\"char__search-critical-error\">\n        <ErrorMessage />\n      </div>\n    ) : null;\n  const results = !char ? null : char.length > 0 ? (\n    <div className=\"char__search-wrapper\">\n      <div className=\"char__search-success\">\n        There is! Visit {char[0].name} page?\n      </div>\n      <Link\n        to={`/characters/${char[0].id}`}\n        className=\"button button__secondary\"\n      >\n        <div className=\"inner\">To page</div>\n      </Link>\n    </div>\n  ) : (\n    <div className=\"char__search-error\">\n      The character was not found. Check the name and try again\n    </div>\n  );\n\n  return (\n    <div className=\"char__search-form\">\n      <Formik\n        initialValues={{\n          charName: '',\n        }}\n        validationSchema={Yup.object({\n          charName: Yup.string().required('This field is required'),\n        })}\n        onSubmit={({ charName }) => {\n          updateChar(charName);\n        }}\n      >\n        <Form>\n          <label className=\"char__search-label\" htmlFor=\"charName\">\n            Or find a character by name:\n          </label>\n          <div className=\"char__search-wrapper\">\n            <Field\n              id=\"charName\"\n              name=\"charName\"\n              type=\"text\"\n              placeholder=\"Enter name\"\n            />\n            <button\n              type=\"submit\"\n              className=\"button button__main\"\n              disabled={process === 'loading'}\n            >\n              <div className=\"inner\">find</div>\n            </button>\n          </div>\n          <FormikErrorMessage\n            component=\"div\"\n            className=\"char__search-error\"\n            name=\"charName\"\n          />\n        </Form>\n      </Formik>\n      {results}\n      {errorMessage}\n    </div>\n  );\n};\n\nexport default CharSearchForm;\n","import { Component } from 'react';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error: true,\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { useState } from 'react';\nimport { Helmet } from 'react-helmet';\n\nimport RandomChar from '../randomChar/RandomChar';\nimport CharList from '../charList/CharList';\nimport CharInfo from '../charInfo/CharInfo';\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelected = id => {\n    setChar(id);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Marvel information portal\" />\n        <title>Marvel information</title>\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <div>\n          <ErrorBoundary>\n            <CharInfo charId={selectedChar} />\n          </ErrorBoundary>\n          <ErrorBoundary>\n            <CharSearchForm />\n          </ErrorBoundary>\n        </div>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  );\n};\n\nexport default MainPage;\n","import { useHttp } from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n  const { request, clearError, process, setPropcess } = useHttp();\n\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  // ЗДЕСЬ БУДЕТ ВАШ КЛЮЧ, ЭТОТ КЛЮЧ МОЖЕТ НЕ РАБОТАТЬ\n  const _apiKey = 'apikey=c5d6fc8b83116d92ed468ce36bac6c62';\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformCharacter);\n  };\n\n  // Вариант модификации готового метода для поиска по имени.\n  // Вызывать его можно вот так: getAllCharacters(null, name)\n\n  // const getAllCharacters = async (offset = _baseOffset, name = '') => {\n  //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\n  //     return res.data.results.map(_transformCharacter);\n  // }\n\n  // Или можно создать отдельный метод для поиска по имени\n\n  const getCharacterByName = async name => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async id => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const res = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async id => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n  };\n\n  const _transformCharacter = char => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : 'There is no description for this character',\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const _transformComics = comics => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || 'There is no description',\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} p.`\n        : 'No information about the number of pages',\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n      language: comics.textObjects[0]?.language || 'en-us',\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : 'not available',\n    };\n  };\n\n  return {\n    clearError,\n    process,\n    setPropcess,\n    getAllCharacters,\n    getCharacterByName,\n    getCharacter,\n    getAllComics,\n    getComic,\n  };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from 'react';\n\nexport const useHttp = () => {\n  const [process, setPropcess] = useState('waiting');\n\n  const request = useCallback(\n    async (\n      url,\n      method = 'GET',\n      body = null,\n      headers = { 'Content-Type': 'application/json' }\n    ) => {\n      setPropcess('loading');\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        return data;\n      } catch (e) {\n        setPropcess('error');\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => {\n    setPropcess('loading');\n  }, []);\n\n  return { request, clearError, process, setPropcess };\n};\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">\n        Please select a character to see information\n      </p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  );\n};\n\nexport default Skeleton;\n","import Spinner from '../components/spinner/Spinner';\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\nimport Skeleton from '../components/skeleton/Skeleton';\n\nconst setContent = (process, Component, data) => {\n  switch (process) {\n    case 'waiting':\n      return <Skeleton />;\n    case 'loading':\n      return <Spinner />;\n    case 'confirmed':\n      return <Component data={data} />;\n    case 'error':\n      return <ErrorMessage />;\n    default:\n      throw new Error('Unexpected process state');\n  }\n};\n\nexport default setContent;\n"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","data","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","_useState","useState","_useState2","_slicedToArray","char","setChar","_useMarvelService","useMarvelService","getCharacter","clearError","process","setPropcess","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","setContent","onClick","mjolnir","props","charList","setCharList","_useState3","_useState4","newItemLoading","setnewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","_asyncToGenerator","_regeneratorRuntime","_callee","newCharList","ended","_context","prev","next","length","concat","_toConsumableArray","stop","_x","apply","arguments","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","Elements","useMemo","Component","Spinner","ErrorMessage","Error","arr","items","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","_Fragment","charId","getCharacterByName","setProcess","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","error","_createClass","value","errorInfo","console","log","this","setState","selectedChar","Helmet","content","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_useHttp","request","useCallback","url","method","body","headers","response","_args","undefined","fetch","sent","ok","status","json","abrupt","t0","useHttp","_apiBase","_apiKey","res","_transformCharacter","_ref2","_callee2","_context2","_ref3","_callee3","_context3","_x2","getAllComics","_ref4","_callee4","_args4","_context4","_transformComics","getComic","_ref5","_callee5","_context5","_x3","slice","path","extension","urls","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","Skeleton"],"sourceRoot":""}